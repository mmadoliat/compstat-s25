{
  "hash": "cd976344ea643787fadbd3ce95d75527",
  "result": {
    "markdown": "---\ntitle: \"Computational Statistics\"\nsubtitle: \"Chapter 1 - Introduction\"\ntitle-slide-attributes:\n  data-background-image: ../vizdata-bg.png\n  data-background-size: stretch\n  data-slide-number: none\nformat: revealjs\n---\n\n\n# Overview of Statistical Computing\n\n- Computational approaches to solving statistical problems\n- Difference between statistical computing and computational statistics\n- Importance of Monte Carlo methods, optimization, and random number generation\n\n# Getting Started with R and RStudio\n\n- R and RStudio: Installation steps\n- Basic syntax in R\n- Common operations: Assignment, sequences, and arithmetic\n\n```{{r}}\nx <- sqrt(2 * pi)\nprint(x)\n```\n\n- Assignment operator `<-` vs `=`\n- Console vs script execution in RStudio\n\n# R Help System and Distributions\n\n- How to use the R help system\n```{{r}}\n?dnorm\nexample(dnorm)\n```\n- Generating random variables and performing statistical tests in R\n\n```{{r}}\nrnorm(100)\nt.test(rnorm(10), rnorm(10))\n```\n\n# Functions in R\n\n- Creating custom functions in R\n- Example: Rolling dice\n\n```{{r}}\nsumdice <- function(n) {{\n    k <- sample(1:6, size=n, replace=TRUE)\n    return(sum(k))\n}}\nsumdice(2)\n```\n\n- Expectation from rolling 100 dice\n```{{r}}\na <- sumdice(100)\na / 100\n```\n\n# Data Structures: Arrays, Data Frames, and Lists\n\n- Introduction to vectors, matrices, and lists\n\n```{{r}}\n# Creating vectors and matrices\nx <- c(1, 2, 3, 4)\nmatrix_x <- matrix(x, nrow=2, ncol=2)\nprint(matrix_x)\n```\n\n- Data frames using the `iris` dataset\n```{{r}}\ndata(iris)\nsummary(iris)\n```\n\n# Table: Comparison of Data Structures\n\n<style>\ntable { font-size: 0.75em; }\n</style>\n\n| Type       | Definition                               | Example                   |\n|------------|------------------------------------------|---------------------------|\n| Vector     | 1D array of elements                     | `x <- c(1, 2, 3)`         |\n| Matrix     | 2D array, same data type                 | `matrix(1:4, nrow=2)`     |\n| Data Frame | 2D array, different data types           | `data(iris)`              |\n| List       | Collection of objects (any type)         | `list(a=1, b=\"hello\")`    |\n\n# Graphics in R\n\n- Basic plotting functions\n\n```{{r}}\nplot(iris$Sepal.Length, iris$Petal.Length)\n```\n\n- Visualization with histograms\n```{{r}}\nhist(iris$Sepal.Length, main=\"Histogram of Sepal Length\", xlab=\"Sepal Length\", col=\"lightblue\", border=\"black\")\n```\n\n# Advanced Visualizations\n\n- Scatter plot with regression line\n```{{r}}\n#| label: setup\n#| message: false\n#| code-line-numbers: \"|1|2\"\nplot(iris$Sepal.Length, iris$Petal.Length)\nabline(lm(Petal.Length ~ Sepal.Length, data=iris), col=\"red\")\n```\n\n- Boxplot for data visualization\n```{{r}}\nboxplot(iris$Sepal.Length ~ iris$Species, main=\"Sepal Length by Species\", xlab=\"Species\", ylab=\"Sepal Length\", col=\"lightgreen\")\n```\n\n# Introduction to ggplot2\n\n- Visualizing using `ggplot2`\n\n::: panel-tabset\n## Code\n\n```{{r}}\nlibrary(ggplot2)\nggplot(iris, aes(x=Sepal.Length, y=Petal.Length)) + \n  geom_point() + \n  geom_smooth(method=\"lm\", se=FALSE, color=\"blue\") + \n  theme_minimal() + \n  labs(title=\"Sepal vs Petal Length in Iris Dataset\", x=\"Sepal Length\", y=\"Petal Length\")\n```\n\n## Plot\n\n\n::: {.cell fig.asp='0.5'}\n\n:::\n\n:::\n# Conclusion\n\n- Recap of key points: R setup, data structures, functions, and plotting\n- Next steps: Exploring probability distributions in R\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}