{
  "hash": "77e6864950cfc80a0cbc2e95f0cfb8c6",
  "result": {
    "markdown": "---\ntitle: \"Computational Statistics\"\nsubtitle: \"Chapter 1 - Introduction\"\ntitle-slide-attributes:\n  data-background-image: mu-bg.png\n  data-background-size: stretch\n  data-slide-number: none\nformat: revealjs\n---\n\n\n# Overview of Statistical Computing\n\n-   Computational approaches to solving statistical problems\n-   Difference between statistical computing and computational statistics\n-   Importance of Monte Carlo methods, optimization, and random number generation\n\n# Getting Started with R and RStudio\n\n-   R and RStudio: Installation steps\n-   Basic syntax in R\n-   Common operations: Assignment, sequences, and arithmetic\n\n```{{r}}\nx <- sqrt(2 * pi)\nprint(x)\n```\n\n-   Assignment operator `<-` vs `=`\n-   Console vs script execution in RStudio\n\n# R Help System and Distributions\n\n-   `help()`, `?` for accessing R documentation\n-   Searching for help topics and datasets\n-   Generating random variables and performing statistical tests in R\n\n```{{r}}\nrnorm(100)\nt.test(rnorm(10), rnorm(10))\n```\n\n# Distributions and Statistical Tests\n\n## Probability Distributions\n\n-   `dnorm()`, `pnorm()`, `qnorm()`\n-   Exploring statistical tests in R\n\n## Statistical Tests\n\n-   `t.test()`, `chisq.test()`\n\n# Functions in R\n\n## Defining Functions\n\n-   `function(arglist) expr`\n-   Return values and default arguments\n\n``` r\nsumdice <- function(n) {\n  k <- sample(1:6, size=n, replace=TRUE)\n  return(sum(k))\n}\nsumdice(2)\n```\n\n# Data Structures: Arrays, Data Frames, and Lists\n\n## Data Structures in R\n\n-   Arrays, matrices, and data frames\n```{{r}}\n# Creating vectors and matrices\nx <- c(1, 2, 3, 4)\nmatrix_x <- matrix(x, nrow=2, ncol=2)\nprint(matrix_x)\n```\n\n-   Example: Iris data set\n``` r\ndata(iris)\nsummary(iris)\n```\n# Table: Comparison of Data Structures\n\n\n```{=html}\n<style>\ntable { font-size: 0.75em; }\n</style>\n```\n\n| Type       | Definition                       | Example                |\n|------------|----------------------------------|------------------------|\n| Vector     | 1D array of elements             | `x <- c(1, 2, 3)`      |\n| Matrix     | 2D array, same data type         | `matrix(1:4, nrow=2)`  |\n| Data Frame | 2D array, different data types   | `data(iris)`           |\n| List       | Collection of objects (any type) | `list(a=1, b=\"hello\")` |\n\n# Graphics in R\n\n## Basic Plots\n\n-   `plot()`, `hist()`, `boxplot()`\n\n::: panel-tabset\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(iris);\n```\n\n```{.r .cell-code}\n# boxplot(iris);\n# hist(iris[,1])\n```\n:::\n\n\n## Plot\n\n\n::: {.cell fig.asp='0.3'}\n::: {.cell-output-display}\n![](Chapter1_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n:::\n\n## Introduction to ggplot2\n\n-   Visualizing using `ggplot2`\n\n::: panel-tabset\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1|2|3-6\"}\nlibrary(ggplot2)\nggplot(iris, aes(x=Sepal.Length, y=Petal.Length)) + \n  geom_point() + \n  geom_smooth(method=\"lm\", se=FALSE, color=\"blue\") + \n  theme_minimal() + \n  labs(title=\"Sepal vs Petal Length in Iris Dataset\", x=\"Sepal Length\", y=\"Petal Length\")\n```\n:::\n\n\n## Plot\n\n\n::: {.cell fig.asp='0.3'}\n::: {.cell-output-display}\n![](Chapter1_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n:::\n\n# Workspace and Files - Markdown and knitr\n\n## Managing Files\n\n-   Working directories and file input/output\n-   Using scripts and automation\n\n## Dynamic Documents\n\n-   Creating reports with R Markdown\n-   Introduction to `knitr` package\n\n# Conclusion\n\n-   Recap of key points: R setup, data structures, functions, and plotting\n-   Next steps: Exploring probability distributions in R\n",
    "supporting": [
      "Chapter1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}